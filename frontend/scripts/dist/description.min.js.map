{"version":3,"sources":["description.js"],"names":["urlParams","URLSearchParams","window","location","search","movieId","get","axios","params","id","then","response","data","movie","_ref2","_slicedToArray","movie_cast","includes","actorName","querySelector","textContent","title","document","innerHTML","concat","description","roleName","ratings","status","release_date","poster","poster_url","alt","trailers","src","trailerLink","replace","message","error","console","alert","selectedShowtimeId","selectedSeatsArray","renderSeats","takenSeats","seatsGrid","getElementById","_loop","seat","classList","createElement","seatNum","setAttribute","disabled","addEventListener","remove","filter","s","add","push","log","appendChild","ROWS","loadTakenSeats","showtimeId","showtime_id","res","err","movie_id","showtimes","length","select","forEach","showtime","Date","show_datetime","toLocaleString","option","value","e","target","userId","localStorage","getItem","quantity","post","user_id","seat_numbers"],"mappings":"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","file":"description.min.js","sourcesContent":["const urlParams = new URLSearchParams(window.location.search);\r\nconst movieId = urlParams.get('id');\r\n\r\nif (movieId) {\r\n  axios.get(\"http://localhost/cinema_server/backend/controllers/get_movies.php\", {\r\n    params: { id: movieId }\r\n  }).then(response => {\r\n    const data = response.data;\r\n    if (data.movie) {\r\n      const movie = data.movie;\r\n      const [actorName, roleName] = movie.movie_cast && movie.movie_cast.includes('as')\r\n      ? movie.movie_cast.split('as')\r\n      : [\"Unknown\", \"Unknown\"];\r\n\r\n      //here to update the content in the page\r\n      document.querySelector('.heading').textContent = movie.title;\r\n\r\n      document.querySelector('.movie-details').innerHTML = `\r\n        <p><strong>Description:</strong> ${movie.description}</p>\r\n        <p><strong>Actor Name:</strong> ${actorName}</p>\r\n        <p><strong>Actor Role:</strong> ${roleName}</p>\r\n        <p><strong>Rating:</strong> ${movie.ratings || \"Not rated\"}</p>\r\n        <p><strong>Status:</strong> ${movie.status}</p>\r\n        <p><strong>Release Date:</strong> ${movie.release_date}</p>`;\r\n\r\n      // to update the poster that we have\r\n      const poster = document.querySelector('.poster_url');\r\n      poster.src = movie.poster_url;\r\n      poster.alt = movie.title;\r\n\r\n      // to update the trailer\r\n      const trailerLink = (movie.trailers || \"\").split(\",\")[0]; // in case we have more then one trailers\r\n      document.querySelector('.video-wrapper iframe').src = trailerLink.replace(\"watch?v=\", \"embed/\");//replace it to make iframe understand the url\r\n    } else {\r\n      alert(data.message || \"Movie not found\");\r\n    }\r\n  })\r\n  .catch(error => {\r\n    console.error(\"Axios error:\", error);\r\n    alert(\"Failed to fetch movie data.\");\r\n  });\r\n\r\n} else {\r\n  alert(\"No movie ID provided in the URL\");\r\n}\r\n\r\n//get showtime id\r\n\r\n\r\nlet selectedShowtimeId = null;\r\nlet selectedSeatsArray = [];\r\n\r\nif (movieId) {\r\n  // Fetch movie details here...\r\n\r\n  // Fetch showtimes for movie\r\n  axios.get(\"http://localhost/cinema_server/backend/controllers/get_showtimeId.php\", {\r\n    params: { movie_id: movieId }\r\n  }).then(res => {\r\n    const showtimes = res.data.showtimes;\r\n\r\n    if (showtimes.length === 0) {\r\n      alert(\"No showtimes available\");\r\n      return;\r\n    }\r\n\r\n    const select = document.getElementById(\"showtimeSelect\");\r\n    select.innerHTML = \"\";\r\n\r\n    showtimes.forEach(showtime => {\r\n      const option = document.createElement(\"option\");\r\n      option.value = showtime.id;\r\n      option.textContent = new Date(showtime.show_datetime).toLocaleString();\r\n      select.appendChild(option);\r\n    });\r\n\r\n    selectedShowtimeId = select.value;\r\n    loadTakenSeats(selectedShowtimeId);\r\n\r\n    select.addEventListener(\"change\", (e) => {\r\n      selectedShowtimeId = e.target.value;\r\n      selectedSeatsArray = [];\r\n      loadTakenSeats(selectedShowtimeId);\r\n    });\r\n\r\n  }).catch(err => {\r\n    console.error(\"Error loading showtimes:\", err);\r\n  });\r\n\r\n} else {\r\n  alert(\"No movie ID provided in the URL\");\r\n}\r\nfunction renderSeats(takenSeats) {\r\n  const seatsGrid = document.getElementById(\"seats-grid\");\r\n  seatsGrid.innerHTML = \"\";\r\n\r\n  const ROWS = 5;\r\n  const COLS = 10;\r\n  const totalSeats = ROWS * COLS;\r\n\r\n  for (let seatNum = 1; seatNum <= totalSeats; seatNum++) {\r\n    const seat = document.createElement(\"button\");\r\n    seat.classList.add(\"seat\");\r\n    seat.textContent = seatNum;\r\n\r\n    if (takenSeats.includes(seatNum)) {\r\n      seat.classList.add(\"taken\");\r\n      seat.setAttribute(\"aria-label\", `Seat ${seatNum}, taken`);\r\n      seat.disabled = true; // disable taken seats so user can't click\r\n    } else {\r\n      seat.setAttribute(\"aria-label\", `Seat ${seatNum}, available`);\r\n\r\n      seat.addEventListener(\"click\", () => {\r\n        if (seat.classList.contains(\"selected\")) {\r\n          seat.classList.remove(\"selected\");\r\n          selectedSeatsArray = selectedSeatsArray.filter(s => s !== seatNum);\r\n          seat.setAttribute(\"aria-pressed\", \"false\");\r\n        } else {\r\n          seat.classList.add(\"selected\");\r\n          selectedSeatsArray.push(seatNum);\r\n          seat.setAttribute(\"aria-pressed\", \"true\");\r\n        }\r\n        console.log(\"Selected seats:\", selectedSeatsArray);\r\n      });\r\n\r\n      seat.setAttribute(\"aria-pressed\", \"false\"); // track toggle state for screen readers\r\n      seat.setAttribute(\"role\", \"button\");\r\n    }\r\n\r\n    seatsGrid.appendChild(seat);\r\n  }\r\n}\r\n\r\n\r\nfunction loadTakenSeats(showtimeId) {\r\n  axios.get(\"http://localhost/cinema_server/backend/controllers/show_takenseats.php\", {\r\n    params: { showtime_id: showtimeId }\r\n  }).then(res => {\r\n    const takenSeats = res.data.takenSeats || [];\r\n    renderSeats(takenSeats);\r\n  }).catch(err => {\r\n    console.error(\"Failed to load taken seats\", err);\r\n  });\r\n}\r\n\r\ndocument.querySelector('.ticket-button').addEventListener('click', () => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n  const quantity = selectedSeatsArray.length;\r\n\r\n  if (!selectedShowtimeId || !userId || quantity === 0) {\r\n    alert(\"Missing user, showtime info or no seats selected!\");\r\n    return;\r\n  }\r\n\r\n  axios.post(\"http://localhost/cinema_server/backend/controllers/buy_ticket.php\", {\r\n    user_id: userId,\r\n    movie_id: movieId,\r\n    showtime_id: selectedShowtimeId,\r\n    seat_numbers: selectedSeatsArray,\r\n    quantity: quantity\r\n  }).then(res => {\r\n    if (res.data.success) {\r\n      alert(\"Ticket purchased successfully\");\r\n      // Optionally clear selections or reload seats here\r\n    } else {\r\n      alert(res.data.message || \"Purchase failed\");\r\n    }\r\n  }).catch(err => {\r\n    console.error(\"Error:\", err);\r\n    alert(\"Something went wrong\");\r\n  });\r\n});\r\n"]}